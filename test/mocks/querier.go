// Code generated by MockGen. DO NOT EDIT.
// Source: infraestructure/db/repos/querier.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	repos "github.com/contact/infraestructure/db/repos"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateContact mocks base method.
func (m *MockQuerier) CreateContact(ctx context.Context, arg repos.CreateContactParams) (repos.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContact", ctx, arg)
	ret0, _ := ret[0].(repos.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContact indicates an expected call of CreateContact.
func (mr *MockQuerierMockRecorder) CreateContact(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContact", reflect.TypeOf((*MockQuerier)(nil).CreateContact), ctx, arg)
}

// DeleteContact mocks base method.
func (m *MockQuerier) DeleteContact(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContact", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContact indicates an expected call of DeleteContact.
func (mr *MockQuerierMockRecorder) DeleteContact(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContact", reflect.TypeOf((*MockQuerier)(nil).DeleteContact), ctx, id)
}

// GetContactByID mocks base method.
func (m *MockQuerier) GetContactByID(ctx context.Context, email string) (repos.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactByID", ctx, email)
	ret0, _ := ret[0].(repos.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactByID indicates an expected call of GetContactByID.
func (mr *MockQuerierMockRecorder) GetContactByID(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactByID", reflect.TypeOf((*MockQuerier)(nil).GetContactByID), ctx, email)
}

// ListContacts mocks base method.
func (m *MockQuerier) ListContacts(ctx context.Context) (repos.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContacts", ctx)
	ret0, _ := ret[0].(repos.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContacts indicates an expected call of ListContacts.
func (mr *MockQuerierMockRecorder) ListContacts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContacts", reflect.TypeOf((*MockQuerier)(nil).ListContacts), ctx)
}

// UpdateContact mocks base method.
func (m *MockQuerier) UpdateContact(ctx context.Context, arg repos.UpdateContactParams) (repos.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContact", ctx, arg)
	ret0, _ := ret[0].(repos.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContact indicates an expected call of UpdateContact.
func (mr *MockQuerierMockRecorder) UpdateContact(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContact", reflect.TypeOf((*MockQuerier)(nil).UpdateContact), ctx, arg)
}
