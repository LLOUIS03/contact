// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: contact.sql

package repos

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contact (id, name, lastname, email, phone) values ($1, $2, $3, $4, $5)
RETURNING id, name, lastname, email, phone, create_at, updated_at
`

type CreateContactParams struct {
	ID       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	Lastname string    `json:"lastname"`
	Email    string    `json:"email"`
	Phone    string    `json:"phone"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, createContact,
		arg.ID,
		arg.Name,
		arg.Lastname,
		arg.Email,
		arg.Phone,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Lastname,
		&i.Email,
		&i.Phone,
		&i.CreateAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contact WHERE id = $1
`

func (q *Queries) DeleteContact(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteContact, id)
	return err
}

const getContactByID = `-- name: GetContactByID :one
SELECT id, name, lastname, email, phone, create_at, updated_at FROM contact
WHERE id = $1
`

func (q *Queries) GetContactByID(ctx context.Context, id uuid.UUID) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getContactByID, id)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Lastname,
		&i.Email,
		&i.Phone,
		&i.CreateAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getContacts = `-- name: GetContacts :many
SELECT id, name, lastname, email, phone, create_at, updated_at FROM contact
`

func (q *Queries) GetContacts(ctx context.Context) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, getContacts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Lastname,
			&i.Email,
			&i.Phone,
			&i.CreateAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :one
UPDATE contact SET name = $2, lastname = $3, email = $4, phone = $5, updated_at=now()
WHERE id = $1 and updated_at=$6
RETURNING id, name, lastname, email, phone, create_at, updated_at
`

type UpdateContactParams struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Lastname  string    `json:"lastname"`
	Email     string    `json:"email"`
	Phone     string    `json:"phone"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, updateContact,
		arg.ID,
		arg.Name,
		arg.Lastname,
		arg.Email,
		arg.Phone,
		arg.UpdatedAt,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Lastname,
		&i.Email,
		&i.Phone,
		&i.CreateAt,
		&i.UpdatedAt,
	)
	return i, err
}
